// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/Strings.sol";
import "@chainlink/contracts/src/v0.8/VRFConsumerBase.sol";


contract RandomWinnerGame is VRFConsumerBase, Ownable {
    //Chainlink variables
    // The amount of LINK to send with the request
    uint public fee;
    bytes32 public keyHash;

    // Game variables
    // Addresses of the players
    address[] public players;
    uint8 maxPlayers;
    bool public gameStarted;
    uint entryFee;
    uint public gameId;

    // Events
    event GameStarted(uint gameId, uint8 maxPlayers, uint entryFee);
    event PlayerJoined(uint gameId, address plyaer);
    event GameEnded(uint gameId, address winner, bytes32 requestId);

    /**
    * constructor inherits a VRFConsumerBase and initiates the values for keyHash, fee and gameStarted
    * @param vrfCoordinator address of VRFCoordinator contract
    * @param linkToken address of LINK token contract
    * @param vrfFee the amount of LINK to send with the request
    * @param vrfKeyHash ID of public key against which randomness is generated
    */
    constructor(address vrfCoordinator, address linkToken, bytes32 vrfKeyHash, uint vrfFee)
        VRFConsumerBase(vrfCoordinator, linkToken) {
            // keyHash is publicKey against which randomness is generated
            keyHash = vrfKeyHash;
            fee = vrfFee;
            // it is init as false so not needed here I guess 
            gameStarted = false;
        }
    
    /* 
    * startGame starts the game by setting appropriate values for all variables
    */
    function startGame(uint8 _maxPlayers, uint _entryFee) public onlyOwner {
        require(!gameStarted, "Game is currently running");
        // empty the players array
        delete players;
        
        maxPlayers = _maxPlayers;
        gameStarted = true;
        entryFee = _entryFee;
        gameId += 1;
        emit GameStarted(gameId, maxPlayers, entryFee);
    }

    /* 
    * joinGame is called when a player wants to enter the game
    */
    function joinGame() public payable {
        require(gameStarted, "Game has not been started yet");
        require(msg.value == entryFee, "Value sent is not equal to entryFee");
        require(players.length < maxPlayers, "Game is full");

        players.push(msg.sender);
        emit PlayerJoined(gameId, msg.sender);
        // If game is full start the winner selection process
        if(players.length == maxPlayers) {
            getRandomWinner();
        }
    }

    /* 
    * getRandomWinner is called to start the process of selecting a random winner
    */
    function getRandomWinner() private returns (bytes32 requestId) {
        // Check if contract has enough LINK to pay the fee
        require(LINK.balanceOf(address(this)) >= fee, "Not enough LINK");
        // Make request to the VRFCoordinator 
        // requestRandomness is a function within the VRFConsumerBase
        // it starts the process of randomness generation
        return requestRandomness(keyHash, fee);
    }

    /**
    * fulfillRandomness is called by VRFCoordinator when it receives a valid VRF proof.
    * This function is overrided to act upon the random number generated by Chainlink VRF.
    * @param requestId  this ID is unique for the request we sent to the VRF Coordinator
    * @param randomness this is a random unit256 generated and returned to us by the VRF Coordinator
    */
    function fulfillRandomness(bytes32 requestId, uint randomness) internal virtual override {
        uint winnerIndex = randomness % players.length;
        address winner = players[winnerIndex];
        (bool sent, ) = winner.call{value: address(this).balance}("");
        require(sent, "Failed to send Ether");
        emit GameEnded(gameId, winner, requestId);
        gameStarted = false;
    }
}